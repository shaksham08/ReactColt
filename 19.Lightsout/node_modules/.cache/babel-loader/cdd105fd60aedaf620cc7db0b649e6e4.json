{"ast":null,"code":"import _slicedToArray from \"E:\\\\GITHUB\\\\ReactColt\\\\19.Lightsout\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"E:\\\\GITHUB\\\\ReactColt\\\\19.Lightsout\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"E:\\\\GITHUB\\\\ReactColt\\\\19.Lightsout\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"E:\\\\GITHUB\\\\ReactColt\\\\19.Lightsout\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"E:\\\\GITHUB\\\\ReactColt\\\\19.Lightsout\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"E:\\\\GITHUB\\\\ReactColt\\\\19.Lightsout\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"E:\\\\GITHUB\\\\ReactColt\\\\19.Lightsout\\\\src\\\\Board.js\";\nimport React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nvar Board = /*#__PURE__*/function (_Component) {\n  _inherits(Board, _Component);\n\n  function Board(props) {\n    var _this;\n\n    _classCallCheck(this, Board);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Board).call(this, props));\n    _this.state = {\n      hasWon: false,\n      board: _this.createBoard()\n    };\n    return _this;\n  }\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n\n  _createClass(Board, [{\n    key: \"createBoard\",\n    value: function createBoard() {\n      var board = [];\n\n      for (var y = 0; y < this.props.nrows; y++) {\n        var row = [];\n\n        for (var x = 0; x < this.props.ncols; x++) {\n          row.push(Math.random() < this.props.chanceLightStartsOn);\n        }\n\n        board.push(row);\n      }\n\n      return board;\n    }\n    /** handle changing a cell: update board & determine if winner */\n\n  }, {\n    key: \"flipCellsAround\",\n    value: function flipCellsAround(coord) {\n      var _this$props = this.props,\n          ncols = _this$props.ncols,\n          nrows = _this$props.nrows;\n      var board = this.state.board;\n\n      var _coord$split$map = coord.split(\"-\").map(Number),\n          _coord$split$map2 = _slicedToArray(_coord$split$map, 2),\n          y = _coord$split$map2[0],\n          x = _coord$split$map2[1];\n\n      function flipCell(y, x) {\n        // if this coord is actually on board, flip it\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          board[y][x] = !board[y][x];\n        }\n      }\n\n      flipCell(y, x);\n      flipCell(y, x - 1);\n      flipCell(y, x + 1);\n      flipCell(y - 1, x);\n      flipCell(y + 1, x); // TODO: flip this cell and the cells around it\n      // win when every cell is turned off\n      // TODO: determine is the game has been won\n\n      var hasWon = board.every(function (row) {\n        return row.every(function (cell) {\n          return !cell;\n        });\n      });\n      this.setState({\n        board: board,\n        hasWon: hasWon\n      });\n    }\n    /** Render game board or winning message. */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      if (this.state.hasWon) {\n        return /*#__PURE__*/React.createElement(\"h1\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 14\n          }\n        }, \"YOU WON!!\");\n      } // if the game is won, just show a winning msg & render nothing else\n      // make table board\n\n\n      var tableBoard = [];\n\n      for (var y = 0; y < this.props.nrows; y++) {\n        var row = [];\n\n        var _loop = function _loop(x) {\n          var cord = \"\".concat(y, \"-\").concat(x);\n          row.push( /*#__PURE__*/React.createElement(Cell, {\n            key: cord,\n            isLit: _this2.state.board[y][x],\n            flipCellsAroundMe: function flipCellsAroundMe() {\n              return _this2.flipCellsAround(cord);\n            },\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 103,\n              columnNumber: 11\n            }\n          }));\n        };\n\n        for (var x = 0; x < this.props.ncols; x++) {\n          _loop(x);\n        }\n\n        tableBoard.push( /*#__PURE__*/React.createElement(\"tr\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 23\n          }\n        }, row));\n      }\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"neon-orange\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 9\n        }\n      }, \"Lights\"), /*#__PURE__*/React.createElement(\"table\", {\n        className: \"Board\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"tbody\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 11\n        }\n      }, tableBoard)));\n    }\n  }]);\n\n  return Board;\n}(Component);\n\nBoard.defaultProps = {\n  nrows: 5,\n  ncols: 5,\n  chanceLightStartsOn: 0.25\n};\nexport default Board;","map":{"version":3,"sources":["E:/GITHUB/ReactColt/19.Lightsout/src/Board.js"],"names":["React","Component","Cell","Board","props","state","hasWon","board","createBoard","y","nrows","row","x","ncols","push","Math","random","chanceLightStartsOn","coord","split","map","Number","flipCell","every","cell","setState","tableBoard","cord","flipCellsAround","defaultProps"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAO,aAAP;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;IA0BMC,K;;;AAMJ,iBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,+EAAMA,KAAN;AAEA,UAAKC,KAAL,GAAa;AACXC,MAAAA,MAAM,EAAE,KADG;AAEXC,MAAAA,KAAK,EAAE,MAAKC,WAAL;AAFI,KAAb;AAHiB;AAOlB;AAED;;;;;kCAEc;AACZ,UAAID,KAAK,GAAG,EAAZ;;AACA,WAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKL,KAAL,CAAWM,KAA/B,EAAsCD,CAAC,EAAvC,EAA2C;AACzC,YAAIE,GAAG,GAAG,EAAV;;AACA,aAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKR,KAAL,CAAWS,KAA/B,EAAsCD,CAAC,EAAvC,EAA2C;AACzCD,UAAAA,GAAG,CAACG,IAAJ,CAASC,IAAI,CAACC,MAAL,KAAgB,KAAKZ,KAAL,CAAWa,mBAApC;AACD;;AACDV,QAAAA,KAAK,CAACO,IAAN,CAAWH,GAAX;AACD;;AACD,aAAOJ,KAAP;AACD;AAED;;;;oCAEgBW,K,EAAO;AAAA,wBACE,KAAKd,KADP;AAAA,UACfS,KADe,eACfA,KADe;AAAA,UACRH,KADQ,eACRA,KADQ;AAErB,UAAIH,KAAK,GAAG,KAAKF,KAAL,CAAWE,KAAvB;;AAFqB,6BAGRW,KAAK,CAACC,KAAN,CAAY,GAAZ,EAAiBC,GAAjB,CAAqBC,MAArB,CAHQ;AAAA;AAAA,UAGhBZ,CAHgB;AAAA,UAGbG,CAHa;;AAKrB,eAASU,QAAT,CAAkBb,CAAlB,EAAqBG,CAArB,EAAwB;AACtB;AAEA,YAAIA,CAAC,IAAI,CAAL,IAAUA,CAAC,GAAGC,KAAd,IAAuBJ,CAAC,IAAI,CAA5B,IAAiCA,CAAC,GAAGC,KAAzC,EAAgD;AAC9CH,UAAAA,KAAK,CAACE,CAAD,CAAL,CAASG,CAAT,IAAc,CAACL,KAAK,CAACE,CAAD,CAAL,CAASG,CAAT,CAAf;AACD;AACF;;AAEDU,MAAAA,QAAQ,CAACb,CAAD,EAAIG,CAAJ,CAAR;AACAU,MAAAA,QAAQ,CAACb,CAAD,EAAIG,CAAC,GAAG,CAAR,CAAR;AACAU,MAAAA,QAAQ,CAACb,CAAD,EAAIG,CAAC,GAAG,CAAR,CAAR;AACAU,MAAAA,QAAQ,CAACb,CAAC,GAAG,CAAL,EAAQG,CAAR,CAAR;AACAU,MAAAA,QAAQ,CAACb,CAAC,GAAG,CAAL,EAAQG,CAAR,CAAR,CAjBqB,CAmBrB;AAEA;AACA;;AACA,UAAIN,MAAM,GAAGC,KAAK,CAACgB,KAAN,CAAY,UAACZ,GAAD;AAAA,eAASA,GAAG,CAACY,KAAJ,CAAU,UAACC,IAAD;AAAA,iBAAU,CAACA,IAAX;AAAA,SAAV,CAAT;AAAA,OAAZ,CAAb;AACA,WAAKC,QAAL,CAAc;AAAElB,QAAAA,KAAK,EAALA,KAAF;AAASD,QAAAA,MAAM,EAANA;AAAT,OAAd;AACD;AAED;;;;6BAES;AAAA;;AACP,UAAI,KAAKD,KAAL,CAAWC,MAAf,EAAuB;AACrB,4BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAAP;AACD,OAHM,CAIP;AACA;;;AACA,UAAIoB,UAAU,GAAG,EAAjB;;AACA,WAAK,IAAIjB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKL,KAAL,CAAWM,KAA/B,EAAsCD,CAAC,EAAvC,EAA2C;AACzC,YAAIE,GAAG,GAAG,EAAV;;AADyC,mCAEhCC,CAFgC;AAGvC,cAAIe,IAAI,aAAMlB,CAAN,cAAWG,CAAX,CAAR;AACAD,UAAAA,GAAG,CAACG,IAAJ,eACE,oBAAC,IAAD;AACE,YAAA,GAAG,EAAEa,IADP;AAEE,YAAA,KAAK,EAAE,MAAI,CAACtB,KAAL,CAAWE,KAAX,CAAiBE,CAAjB,EAAoBG,CAApB,CAFT;AAGE,YAAA,iBAAiB,EAAE;AAAA,qBAAM,MAAI,CAACgB,eAAL,CAAqBD,IAArB,CAAN;AAAA,aAHrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAJuC;;AAEzC,aAAK,IAAIf,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKR,KAAL,CAAWS,KAA/B,EAAsCD,CAAC,EAAvC,EAA2C;AAAA,gBAAlCA,CAAkC;AAS1C;;AACDc,QAAAA,UAAU,CAACZ,IAAX,eAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAKH,GAAL,CAAhB;AACD;;AAED,0BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAK,QAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE;AAAO,QAAA,SAAS,EAAC,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAQe,UAAR,CADF,CAFF,CADF;AAQD;;;;EA1FiBzB,S;;AAAdE,K,CACG0B,Y,GAAe;AACpBnB,EAAAA,KAAK,EAAE,CADa;AAEpBG,EAAAA,KAAK,EAAE,CAFa;AAGpBI,EAAAA,mBAAmB,EAAE;AAHD,C;AA4FxB,eAAed,KAAf","sourcesContent":["import React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nclass Board extends Component {\n  static defaultProps = {\n    nrows: 5,\n    ncols: 5,\n    chanceLightStartsOn: 0.25,\n  };\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      hasWon: false,\n      board: this.createBoard(),\n    };\n  }\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n  createBoard() {\n    let board = [];\n    for (let y = 0; y < this.props.nrows; y++) {\n      let row = [];\n      for (let x = 0; x < this.props.ncols; x++) {\n        row.push(Math.random() < this.props.chanceLightStartsOn);\n      }\n      board.push(row);\n    }\n    return board;\n  }\n\n  /** handle changing a cell: update board & determine if winner */\n\n  flipCellsAround(coord) {\n    let { ncols, nrows } = this.props;\n    let board = this.state.board;\n    let [y, x] = coord.split(\"-\").map(Number);\n\n    function flipCell(y, x) {\n      // if this coord is actually on board, flip it\n\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        board[y][x] = !board[y][x];\n      }\n    }\n\n    flipCell(y, x);\n    flipCell(y, x - 1);\n    flipCell(y, x + 1);\n    flipCell(y - 1, x);\n    flipCell(y + 1, x);\n\n    // TODO: flip this cell and the cells around it\n\n    // win when every cell is turned off\n    // TODO: determine is the game has been won\n    let hasWon = board.every((row) => row.every((cell) => !cell));\n    this.setState({ board, hasWon });\n  }\n\n  /** Render game board or winning message. */\n\n  render() {\n    if (this.state.hasWon) {\n      return <h1>YOU WON!!</h1>;\n    }\n    // if the game is won, just show a winning msg & render nothing else\n    // make table board\n    let tableBoard = [];\n    for (let y = 0; y < this.props.nrows; y++) {\n      let row = [];\n      for (let x = 0; x < this.props.ncols; x++) {\n        let cord = `${y}-${x}`;\n        row.push(\n          <Cell\n            key={cord}\n            isLit={this.state.board[y][x]}\n            flipCellsAroundMe={() => this.flipCellsAround(cord)}\n          />\n        );\n      }\n      tableBoard.push(<tr>{row}</tr>);\n    }\n\n    return (\n      <div>\n        <div className=\"neon-orange\">Lights</div>\n        <table className=\"Board\">\n          <tbody>{tableBoard}</tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}